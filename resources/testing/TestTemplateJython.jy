from com.xebialabs.xlrelease.api.v1.forms import Variable


baseTemplate = releaseApi.searchReleasesByTitle(templateName)[0]
referenceRelease = releaseApi.getRelease(releaseId)


def find_all_tasks(refRel):
  tasks = []
  for phase in refRel.phases:
    for task in phase.tasks:
      tasks.append(task)
  return tasks

def find_task_by_type(all, type, startIndex):
  for i in range(startIndex, len(all)):
    if all[i].type.toString() == type:
      return all[i], i + 1

  raise Exception("Task not found after index %s" % startIndex)

def create_mock_script(template_task, executed_task):

  script = ""
  for output_property in get_output_properties(template_task):
    variable = template_task.variableMapping[output_property]
    variable_name = remove_prefix_suffix(variable)
    script +=  "releaseVariables[{0}] = '{1}'".format(variable_name, executed_task.getProperty(output_property))
    script += "\n"

  return script

def get_output_properties(task):
  vars = []
  type = task.getType()
  for prop in type.getDescriptor().getPropertyDescriptors():
    if prop.category == 'output':
      vars.append(prop.getName())

  return vars

def print_code(title, code):
  print "### {0}".format(title)
  print "```"
  print "Release:{0}".format(code)
  print "```"
  print ""

def remove_prefix_suffix(s, prefix="${", suffix="}"):
  """Removes a given prefix and suffix from a string.

  Args:
    s: The input string.
    prefix: The prefix to remove.
    suffix: The suffix to remove.

  Returns:
    The string with the prefix and suffix removed, or the original string
    if the prefix or suffix is not found.
  """

  if s.startswith(prefix) and s.endswith(suffix):
    return s[len(prefix):-len(suffix)]
  else:
    return s

#
# Script
#

# Reference list of previously run tasks, as a flat list for simpler lookup
allTasks = find_all_tasks(referenceRelease)
taskIndex = 0

# Copy variables.
# XXX Make this work
for variable in releaseApi.getVariables(referenceRelease.id):
  # print "type: %s; contents: %s" % (type(variable), variable)
  formVar = Variable(variable.type.toString(), variable.key, variable.getValue(), variable.requiresValue)
  releaseApi.createVariable(release.id, formVar)

# Copy template into this release and replace certain tasks with mocks
for phase in baseTemplate.phases:
  print "PHASE" + phase.title
  addedPhase = phaseApi.addPhase(release.id, phase)
  for task in phase.tasks:

    if task.type.toString() == mockType:

      print_code("Output properties in {0}".format(task.title), get_output_properties(task))
      print_code("Variables in {0}".format(task.title), task.variableMapping)

      mockTask = taskApi.newTask('xlrelease.ScriptTask')
      mockTask.title = "MOCK " + task.title
      original, taskIndex = find_task_by_type(allTasks, mockType, taskIndex)
      mockTask.script = create_mock_script(task, original)
      taskApi.addTask(addedPhase.id, mockTask)
    else:
      taskApi.addTask(addedPhase.id, task)